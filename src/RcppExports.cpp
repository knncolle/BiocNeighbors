// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/BiocNeighbors.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// build_annoy
SEXP build_annoy(Rcpp::NumericMatrix data, int num_trees, double search_mult, std::string distance);
RcppExport SEXP _BiocNeighbors_build_annoy(SEXP dataSEXP, SEXP num_treesSEXP, SEXP search_multSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type num_trees(num_treesSEXP);
    Rcpp::traits::input_parameter< double >::type search_mult(search_multSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(build_annoy(data, num_trees, search_mult, distance));
    return rcpp_result_gen;
END_RCPP
}
// build_exhaustive
SEXP build_exhaustive(Rcpp::NumericMatrix data, std::string distance);
RcppExport SEXP _BiocNeighbors_build_exhaustive(SEXP dataSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(build_exhaustive(data, distance));
    return rcpp_result_gen;
END_RCPP
}
// find_mutual_nns
Rcpp::List find_mutual_nns(Rcpp::IntegerMatrix left, Rcpp::IntegerMatrix right);
RcppExport SEXP _BiocNeighbors_find_mutual_nns(SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type left(leftSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(find_mutual_nns(left, right));
    return rcpp_result_gen;
END_RCPP
}
// generic_find_knn
SEXP generic_find_knn(SEXP prebuilt_ptr, int k, int num_threads, bool report_index, bool report_distance);
RcppExport SEXP _BiocNeighbors_generic_find_knn(SEXP prebuilt_ptrSEXP, SEXP kSEXP, SEXP num_threadsSEXP, SEXP report_indexSEXP, SEXP report_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type prebuilt_ptr(prebuilt_ptrSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type report_index(report_indexSEXP);
    Rcpp::traits::input_parameter< bool >::type report_distance(report_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(generic_find_knn(prebuilt_ptr, k, num_threads, report_index, report_distance));
    return rcpp_result_gen;
END_RCPP
}
// generic_find_knn_subset
SEXP generic_find_knn_subset(SEXP prebuilt_ptr, Rcpp::IntegerVector chosen, int k, int num_threads, bool report_index, bool report_distance);
RcppExport SEXP _BiocNeighbors_generic_find_knn_subset(SEXP prebuilt_ptrSEXP, SEXP chosenSEXP, SEXP kSEXP, SEXP num_threadsSEXP, SEXP report_indexSEXP, SEXP report_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type prebuilt_ptr(prebuilt_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chosen(chosenSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type report_index(report_indexSEXP);
    Rcpp::traits::input_parameter< bool >::type report_distance(report_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(generic_find_knn_subset(prebuilt_ptr, chosen, k, num_threads, report_index, report_distance));
    return rcpp_result_gen;
END_RCPP
}
// generic_query_knn
SEXP generic_query_knn(SEXP prebuilt_ptr, Rcpp::NumericMatrix query, int k, int num_threads, bool report_index, bool report_distance);
RcppExport SEXP _BiocNeighbors_generic_query_knn(SEXP prebuilt_ptrSEXP, SEXP querySEXP, SEXP kSEXP, SEXP num_threadsSEXP, SEXP report_indexSEXP, SEXP report_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type prebuilt_ptr(prebuilt_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type report_index(report_indexSEXP);
    Rcpp::traits::input_parameter< bool >::type report_distance(report_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(generic_query_knn(prebuilt_ptr, query, k, num_threads, report_index, report_distance));
    return rcpp_result_gen;
END_RCPP
}
// generic_find_all
SEXP generic_find_all(SEXP prebuilt_ptr, Rcpp::NumericVector thresholds, int num_threads, bool report_index, bool report_distance);
RcppExport SEXP _BiocNeighbors_generic_find_all(SEXP prebuilt_ptrSEXP, SEXP thresholdsSEXP, SEXP num_threadsSEXP, SEXP report_indexSEXP, SEXP report_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type prebuilt_ptr(prebuilt_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type report_index(report_indexSEXP);
    Rcpp::traits::input_parameter< bool >::type report_distance(report_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(generic_find_all(prebuilt_ptr, thresholds, num_threads, report_index, report_distance));
    return rcpp_result_gen;
END_RCPP
}
// generic_find_all_subset
SEXP generic_find_all_subset(SEXP prebuilt_ptr, Rcpp::IntegerVector chosen, Rcpp::NumericVector thresholds, int num_threads, bool report_index, bool report_distance);
RcppExport SEXP _BiocNeighbors_generic_find_all_subset(SEXP prebuilt_ptrSEXP, SEXP chosenSEXP, SEXP thresholdsSEXP, SEXP num_threadsSEXP, SEXP report_indexSEXP, SEXP report_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type prebuilt_ptr(prebuilt_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type chosen(chosenSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type report_index(report_indexSEXP);
    Rcpp::traits::input_parameter< bool >::type report_distance(report_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(generic_find_all_subset(prebuilt_ptr, chosen, thresholds, num_threads, report_index, report_distance));
    return rcpp_result_gen;
END_RCPP
}
// generic_query_all
SEXP generic_query_all(SEXP prebuilt_ptr, Rcpp::NumericMatrix query, Rcpp::NumericVector thresholds, int num_threads, bool report_index, bool report_distance);
RcppExport SEXP _BiocNeighbors_generic_query_all(SEXP prebuilt_ptrSEXP, SEXP querySEXP, SEXP thresholdsSEXP, SEXP num_threadsSEXP, SEXP report_indexSEXP, SEXP report_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type prebuilt_ptr(prebuilt_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type query(querySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type report_index(report_indexSEXP);
    Rcpp::traits::input_parameter< bool >::type report_distance(report_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(generic_query_all(prebuilt_ptr, query, thresholds, num_threads, report_index, report_distance));
    return rcpp_result_gen;
END_RCPP
}
// build_hnsw
SEXP build_hnsw(Rcpp::NumericMatrix data, int nlinks, int ef_construct, int ef_search, std::string distance);
RcppExport SEXP _BiocNeighbors_build_hnsw(SEXP dataSEXP, SEXP nlinksSEXP, SEXP ef_constructSEXP, SEXP ef_searchSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type nlinks(nlinksSEXP);
    Rcpp::traits::input_parameter< int >::type ef_construct(ef_constructSEXP);
    Rcpp::traits::input_parameter< int >::type ef_search(ef_searchSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(build_hnsw(data, nlinks, ef_construct, ef_search, distance));
    return rcpp_result_gen;
END_RCPP
}
// build_kmknn
SEXP build_kmknn(Rcpp::NumericMatrix data, std::string distance);
RcppExport SEXP _BiocNeighbors_build_kmknn(SEXP dataSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(build_kmknn(data, distance));
    return rcpp_result_gen;
END_RCPP
}
// build_vptree
SEXP build_vptree(Rcpp::NumericMatrix data, std::string distance);
RcppExport SEXP _BiocNeighbors_build_vptree(SEXP dataSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(build_vptree(data, distance));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BiocNeighbors_build_annoy", (DL_FUNC) &_BiocNeighbors_build_annoy, 4},
    {"_BiocNeighbors_build_exhaustive", (DL_FUNC) &_BiocNeighbors_build_exhaustive, 2},
    {"_BiocNeighbors_find_mutual_nns", (DL_FUNC) &_BiocNeighbors_find_mutual_nns, 2},
    {"_BiocNeighbors_generic_find_knn", (DL_FUNC) &_BiocNeighbors_generic_find_knn, 5},
    {"_BiocNeighbors_generic_find_knn_subset", (DL_FUNC) &_BiocNeighbors_generic_find_knn_subset, 6},
    {"_BiocNeighbors_generic_query_knn", (DL_FUNC) &_BiocNeighbors_generic_query_knn, 6},
    {"_BiocNeighbors_generic_find_all", (DL_FUNC) &_BiocNeighbors_generic_find_all, 5},
    {"_BiocNeighbors_generic_find_all_subset", (DL_FUNC) &_BiocNeighbors_generic_find_all_subset, 6},
    {"_BiocNeighbors_generic_query_all", (DL_FUNC) &_BiocNeighbors_generic_query_all, 6},
    {"_BiocNeighbors_build_hnsw", (DL_FUNC) &_BiocNeighbors_build_hnsw, 5},
    {"_BiocNeighbors_build_kmknn", (DL_FUNC) &_BiocNeighbors_build_kmknn, 2},
    {"_BiocNeighbors_build_vptree", (DL_FUNC) &_BiocNeighbors_build_vptree, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BiocNeighbors(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
